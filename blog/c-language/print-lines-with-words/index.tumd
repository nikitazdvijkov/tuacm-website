templates/article
Title:		Printing Lines Containing a Specific Word
Author:		Joseph Mellor
Tagline:	Our first experience with build systems.
Code Style:	trac+dark
Import:		code-block terminal aside
Scripts:

\{{style}}

.terminal pre {
	color: #AAAAAA;
}

.terminal .file {
	color: #298FDD;
	font-weight: bold;
}

.terminal .exe {
	color: #4CE64C;
	font-weight: bold;
}

\{{\style}}
<i>This is the seventeenth article in the </i>Making Sense of C<i> series.
In this article, we're going to write some new code and combine it with the code
we've written in the last article to create a new program that prints out every
line in a user specified file that contains a user-specified word.</i>

# Part One: Writing the Code

As always, we need to start with our goal and break it up into high-level tasks.
Just like the last article, we need to know the word and the file to read from.
Then, if we find the word in a line, we need to print out the line number and
the line.

Our algorithm currently looks like

\{{ol}}

Get the user input.

Read through each line and print out the line if it contains the word.

\{{\ol}}

## Boilerplate and Trivial Code

I decided to reuse the name of the <a
href="../word-counter/#boilerplate-and-trivial-code">section from the last
article</a> because what we're going to write here will be almost identical to
the last program since we're taking in the same exact info in the exact same
way. In fact, I'm just going to copy a part of the program from last time.

\{{code-block c}}

#include {{lt}}stdio.h{{gt}}

int main(int argc, char ** argv) {
    if (3 {{gt}} argc) {
        fprintf(stderr, "./print-lines-with-word file_name word_to_count\n");
        return -1;
    }
    char * program_name = argv[0];
    char * file_name = argv[1];
    char * word = argv[2];
    // TODO: Loop through the file and print out lines containing the word
    return 0;
}

\{{\code-block}}

## File Stuff

Again, we can do the exact same thing with the file

# Part Two: A Basic Build System


