article
Title:		The Basics of C
Author:		Joseph Mellor
Tagline:	If you decided to make a programming language, where would you start?
Code Style:	trac+dark
Import:		aside code-block terminal
Scripts:

<i>This is the second article in the </i>Making Sense of C<i> series.
If you have already programmed before, you won't get too much out of this
particular article.
Just skip to the <a href="#summary">summary</a> or look for the blocks of
code.</i>

Put yourself in the shoes of Ritchie et al while they were designing the {C}
language.

\{{ul}}

You're working on a computer with a few kilobytes of memory that can execute
machine code at a decent speed (for the time).

You've decided that you want to make a compiler that can read code written in
your new programming language and produce a program written in machine code.

You only want the compiler to run once per machine per code update and it should
run fast without using a bunch of memory.

You also want to be able to send code you write in this new language to other
people.

Sending data to people requires you mailing them physical memory storage like
tape or floppy disks, as there is no internet.

\{{\ul}}

These goals will help guide us through the rest of the article.

# Topics Covered

\{{ul}}

<b>How Should You Give Code to the Compiler?</b>

<b>How Should the Code be Formatted?</b>

<b>How Should the Code Separate Statements?</b>

\{{\ul}}

## How Should You Give Code to the Compiler?

You want to organize your code so that your compiler can read it and you can
send it to someone else.
You can't just give the compiler lines of code on the command line, as
sending it to people would be difficult.
Since you have to save the code to a tape or a disc for anyone to use it, the
only reasonable option for organizing your code is to put it into a file.

Now that you've decided that your code is going to be in a file, you need to
tell the compiler which file to use.
The most straightforward way to do so is to just provide the name of the file to
the compiler on the command line, like so:

\{{terminal}}

$ compiler file

\{{\terminal}}

Now, it's probably a good idea to distinguish files written in your language
from other files, so let's add an extension.
Since you're programming in {C}, let's just add the extension {.c} to our files.

We should also give a short name to our compiler because typing is hard, so
let's call it {cc} for {C Compiler}.

Now, using our compiler should look like:

\{{terminal}}

$ cc file.c

\{{\terminal}}

Now that we've figured out how to get the code to our compiler, we should figure
out the format of the file.

## How Should the Code be Formatted?

Since you can make the compiler read a file however it wants and you can
organize the data in the file however you want, you might as well stick to the
standard way we read things (in English, since we're designing {C} in America).

Unless you use something that will modify the order of execution, the compiler
will read your code from top to bottom, left to right, just like in English.
Blank lines, spacing, and indentation generally don't matter to the compiler,
but they do matter to people who try to read your code, which includes you.

Now that we've figured out how the compiler should read the program, how should
you separate out statements?

## How Should the Code Separate Statements?

In English, we use punctuation marks like commas, periods, question marks, etc.
to separate statements, so we'll try to use some sort of punctuation.
We could use a period, but periods are needed to represent decimal numbers (among other things).
We could use a comma, but we normally use a comma for lists, so that won't work.
We could use a newline, but we have a bit of a problem: <a
href="https://en.wikipedia.org/wiki/Newline#Representation">newlines vary from
operating system to operating system</a>.
The only punctuation mark we have left is a semicolon, so we'll use a semicolon.
There's also some history with <a
href="https://en.wikipedia.org/wiki/Semicolon#Programming">ALGOL 60</a> using
semicolons, as they used periods to end files, semicolons to end statements
within a file, and commas for lists.

When you want to make a statement, you should add a semicolon to the end of the
statement so the compiler knows that you want to move to the next statement.
You should generally write <b>one statement per line</b>, even though you could
write the entire program on one line.
If you forget the semicolon, the compiler will likely throw an error and you'll
have to find where the semicolon should be.

In the code below, each statement will be read in the order that you would
normally read them in English.

\{{code-block c no-line-numbers}}

first statement;
second statement;
    third statement;fourth statement;       fifth statement;

\{{\code-block}}

# Summary

We now have a general idea that we want to write the code in a file ending in
{.c} that should look like

\{{code-block c no-line-numbers}}

first statement;
second statement;
third statement;

\{{\code-block}}

and we're going to convert it into machine code by running the compiler and
giving it the name of the file we want to compile.

As we move on in the tutorial, we're going to expand upon what we have here
while maintaining the general ideas laid out in this program.

# What's Next

Throughout this tutorial, I'm going to need to annotate and explain some of the
code within the code itself.
So next, we're going to solve another problem: How can we add notes to our code
that the compiler will ignore?

Find out in the next article: <a href="../comments/index.html">Comments in
C</a>.
